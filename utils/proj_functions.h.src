// # -*- mode: c -*-
/* File: proj_functions.h.src */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/

#ifndef DOUBLE_PREC
#define DOUBLE_PREC
#endif
// # -*- mode: c -*-
#pragma once

#include "defs.h"
#include "utils.h"

#include <stdint.h>
#include <gsl/gsl_interp.h>

// Info about a particle pair that we will pass to the projection function
typedef struct
{
    int64_t nprojbins;
    int64_t nsbins;
    int64_t nres;
    int64_t nbases;
    DOUBLE *supp_sqr;
    DOUBLE *supp;
    DOUBLE *projbases;
    proj_method_t proj_method;
} proj_struct_DOUBLE;

typedef void (*proj_func_t_DOUBLE)(const proj_struct_DOUBLE*, DOUBLE*, DOUBLE);

//////////////////////////////////
// Projection functions
//////////////////////////////////

void tophat_DOUBLE(const proj_struct_DOUBLE *proj, DOUBLE *u, DOUBLE sqr_s);

void piecewise_DOUBLE(const proj_struct_DOUBLE *proj, DOUBLE *u, DOUBLE sqr_s);

void powerlaw_DOUBLE(const proj_struct_DOUBLE *proj, DOUBLE *u, DOUBLE sqr_s);

void dcosmo_DOUBLE(const proj_struct_DOUBLE *proj, DOUBLE *u, DOUBLE sqr_s);

void general_r_DOUBLE(const proj_struct_DOUBLE *proj, DOUBLE *u, DOUBLE sqr_s);

//////////////////////////////////
// Utility functions
//////////////////////////////////

extern proj_func_t_DOUBLE get_proj_func_by_method_DOUBLE(const proj_method_t method);


//proj_func_t_DOUBLE get_proj_func_by_method_DOUBLE(const proj_method_t method){
//    switch(method){
//        case TOPHAT:
//            return &tophat_DOUBLE;
//        case PIECEWISE:
//            return &piecewise_DOUBLE;
//        case POWERLAW:
//            return &powerlaw_DOUBLE;
//        case DCOSMO:
//            return &dcosmo_DOUBLE;
//        default:
//        case NONEPROJ:
//            return NULL;
//    }
//}
//
void compute_amplitudes_DOUBLE(int nprojbins, int nd1, int nd2, int nr1, int nr2,
            DOUBLE *dd, DOUBLE *dr, DOUBLE *rd, DOUBLE *rr, DOUBLE *qq, DOUBLE *amps);

void evaluate_xi_DOUBLE(int nprojbins, DOUBLE *amps, int nsvals, DOUBLE *svals,
            int nsbins, DOUBLE *sbins, DOUBLE *xi, proj_method_t proj_method, char *projfn);


